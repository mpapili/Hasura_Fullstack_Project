// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AuthGroups", testAuthGroups)
	t.Run("AuthGroupPermissions", testAuthGroupPermissions)
	t.Run("AuthPermissions", testAuthPermissions)
	t.Run("AuthUsers", testAuthUsers)
	t.Run("AuthUserGroups", testAuthUserGroups)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissions)
	t.Run("DjangoAdminLogs", testDjangoAdminLogs)
	t.Run("DjangoContentTypes", testDjangoContentTypes)
	t.Run("DjangoMigrations", testDjangoMigrations)
	t.Run("DjangoSessions", testDjangoSessions)
	t.Run("MeetupsMeetups", testMeetupsMeetups)
	t.Run("PetsPets", testPetsPets)
	t.Run("PetsSpecies", testPetsSpecies)
}

func TestDelete(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsDelete)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsDelete)
	t.Run("AuthPermissions", testAuthPermissionsDelete)
	t.Run("AuthUsers", testAuthUsersDelete)
	t.Run("AuthUserGroups", testAuthUserGroupsDelete)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsDelete)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsDelete)
	t.Run("DjangoContentTypes", testDjangoContentTypesDelete)
	t.Run("DjangoMigrations", testDjangoMigrationsDelete)
	t.Run("DjangoSessions", testDjangoSessionsDelete)
	t.Run("MeetupsMeetups", testMeetupsMeetupsDelete)
	t.Run("PetsPets", testPetsPetsDelete)
	t.Run("PetsSpecies", testPetsSpeciesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsQueryDeleteAll)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsQueryDeleteAll)
	t.Run("AuthPermissions", testAuthPermissionsQueryDeleteAll)
	t.Run("AuthUsers", testAuthUsersQueryDeleteAll)
	t.Run("AuthUserGroups", testAuthUserGroupsQueryDeleteAll)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsQueryDeleteAll)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsQueryDeleteAll)
	t.Run("DjangoContentTypes", testDjangoContentTypesQueryDeleteAll)
	t.Run("DjangoMigrations", testDjangoMigrationsQueryDeleteAll)
	t.Run("DjangoSessions", testDjangoSessionsQueryDeleteAll)
	t.Run("MeetupsMeetups", testMeetupsMeetupsQueryDeleteAll)
	t.Run("PetsPets", testPetsPetsQueryDeleteAll)
	t.Run("PetsSpecies", testPetsSpeciesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsSliceDeleteAll)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsSliceDeleteAll)
	t.Run("AuthPermissions", testAuthPermissionsSliceDeleteAll)
	t.Run("AuthUsers", testAuthUsersSliceDeleteAll)
	t.Run("AuthUserGroups", testAuthUserGroupsSliceDeleteAll)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsSliceDeleteAll)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsSliceDeleteAll)
	t.Run("DjangoContentTypes", testDjangoContentTypesSliceDeleteAll)
	t.Run("DjangoMigrations", testDjangoMigrationsSliceDeleteAll)
	t.Run("DjangoSessions", testDjangoSessionsSliceDeleteAll)
	t.Run("MeetupsMeetups", testMeetupsMeetupsSliceDeleteAll)
	t.Run("PetsPets", testPetsPetsSliceDeleteAll)
	t.Run("PetsSpecies", testPetsSpeciesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsExists)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsExists)
	t.Run("AuthPermissions", testAuthPermissionsExists)
	t.Run("AuthUsers", testAuthUsersExists)
	t.Run("AuthUserGroups", testAuthUserGroupsExists)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsExists)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsExists)
	t.Run("DjangoContentTypes", testDjangoContentTypesExists)
	t.Run("DjangoMigrations", testDjangoMigrationsExists)
	t.Run("DjangoSessions", testDjangoSessionsExists)
	t.Run("MeetupsMeetups", testMeetupsMeetupsExists)
	t.Run("PetsPets", testPetsPetsExists)
	t.Run("PetsSpecies", testPetsSpeciesExists)
}

func TestFind(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsFind)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsFind)
	t.Run("AuthPermissions", testAuthPermissionsFind)
	t.Run("AuthUsers", testAuthUsersFind)
	t.Run("AuthUserGroups", testAuthUserGroupsFind)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsFind)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsFind)
	t.Run("DjangoContentTypes", testDjangoContentTypesFind)
	t.Run("DjangoMigrations", testDjangoMigrationsFind)
	t.Run("DjangoSessions", testDjangoSessionsFind)
	t.Run("MeetupsMeetups", testMeetupsMeetupsFind)
	t.Run("PetsPets", testPetsPetsFind)
	t.Run("PetsSpecies", testPetsSpeciesFind)
}

func TestBind(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsBind)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsBind)
	t.Run("AuthPermissions", testAuthPermissionsBind)
	t.Run("AuthUsers", testAuthUsersBind)
	t.Run("AuthUserGroups", testAuthUserGroupsBind)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsBind)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsBind)
	t.Run("DjangoContentTypes", testDjangoContentTypesBind)
	t.Run("DjangoMigrations", testDjangoMigrationsBind)
	t.Run("DjangoSessions", testDjangoSessionsBind)
	t.Run("MeetupsMeetups", testMeetupsMeetupsBind)
	t.Run("PetsPets", testPetsPetsBind)
	t.Run("PetsSpecies", testPetsSpeciesBind)
}

func TestOne(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsOne)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsOne)
	t.Run("AuthPermissions", testAuthPermissionsOne)
	t.Run("AuthUsers", testAuthUsersOne)
	t.Run("AuthUserGroups", testAuthUserGroupsOne)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsOne)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsOne)
	t.Run("DjangoContentTypes", testDjangoContentTypesOne)
	t.Run("DjangoMigrations", testDjangoMigrationsOne)
	t.Run("DjangoSessions", testDjangoSessionsOne)
	t.Run("MeetupsMeetups", testMeetupsMeetupsOne)
	t.Run("PetsPets", testPetsPetsOne)
	t.Run("PetsSpecies", testPetsSpeciesOne)
}

func TestAll(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsAll)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsAll)
	t.Run("AuthPermissions", testAuthPermissionsAll)
	t.Run("AuthUsers", testAuthUsersAll)
	t.Run("AuthUserGroups", testAuthUserGroupsAll)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsAll)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsAll)
	t.Run("DjangoContentTypes", testDjangoContentTypesAll)
	t.Run("DjangoMigrations", testDjangoMigrationsAll)
	t.Run("DjangoSessions", testDjangoSessionsAll)
	t.Run("MeetupsMeetups", testMeetupsMeetupsAll)
	t.Run("PetsPets", testPetsPetsAll)
	t.Run("PetsSpecies", testPetsSpeciesAll)
}

func TestCount(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsCount)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsCount)
	t.Run("AuthPermissions", testAuthPermissionsCount)
	t.Run("AuthUsers", testAuthUsersCount)
	t.Run("AuthUserGroups", testAuthUserGroupsCount)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsCount)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsCount)
	t.Run("DjangoContentTypes", testDjangoContentTypesCount)
	t.Run("DjangoMigrations", testDjangoMigrationsCount)
	t.Run("DjangoSessions", testDjangoSessionsCount)
	t.Run("MeetupsMeetups", testMeetupsMeetupsCount)
	t.Run("PetsPets", testPetsPetsCount)
	t.Run("PetsSpecies", testPetsSpeciesCount)
}

func TestHooks(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsHooks)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsHooks)
	t.Run("AuthPermissions", testAuthPermissionsHooks)
	t.Run("AuthUsers", testAuthUsersHooks)
	t.Run("AuthUserGroups", testAuthUserGroupsHooks)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsHooks)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsHooks)
	t.Run("DjangoContentTypes", testDjangoContentTypesHooks)
	t.Run("DjangoMigrations", testDjangoMigrationsHooks)
	t.Run("DjangoSessions", testDjangoSessionsHooks)
	t.Run("MeetupsMeetups", testMeetupsMeetupsHooks)
	t.Run("PetsPets", testPetsPetsHooks)
	t.Run("PetsSpecies", testPetsSpeciesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsInsert)
	t.Run("AuthGroups", testAuthGroupsInsertWhitelist)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsInsert)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsInsertWhitelist)
	t.Run("AuthPermissions", testAuthPermissionsInsert)
	t.Run("AuthPermissions", testAuthPermissionsInsertWhitelist)
	t.Run("AuthUsers", testAuthUsersInsert)
	t.Run("AuthUsers", testAuthUsersInsertWhitelist)
	t.Run("AuthUserGroups", testAuthUserGroupsInsert)
	t.Run("AuthUserGroups", testAuthUserGroupsInsertWhitelist)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsInsert)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsInsertWhitelist)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsInsert)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsInsertWhitelist)
	t.Run("DjangoContentTypes", testDjangoContentTypesInsert)
	t.Run("DjangoContentTypes", testDjangoContentTypesInsertWhitelist)
	t.Run("DjangoMigrations", testDjangoMigrationsInsert)
	t.Run("DjangoMigrations", testDjangoMigrationsInsertWhitelist)
	t.Run("DjangoSessions", testDjangoSessionsInsert)
	t.Run("DjangoSessions", testDjangoSessionsInsertWhitelist)
	t.Run("MeetupsMeetups", testMeetupsMeetupsInsert)
	t.Run("MeetupsMeetups", testMeetupsMeetupsInsertWhitelist)
	t.Run("PetsPets", testPetsPetsInsert)
	t.Run("PetsPets", testPetsPetsInsertWhitelist)
	t.Run("PetsSpecies", testPetsSpeciesInsert)
	t.Run("PetsSpecies", testPetsSpeciesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AuthGroupPermissionToAuthPermissionUsingPermission", testAuthGroupPermissionToOneAuthPermissionUsingPermission)
	t.Run("AuthGroupPermissionToAuthGroupUsingGroup", testAuthGroupPermissionToOneAuthGroupUsingGroup)
	t.Run("AuthPermissionToDjangoContentTypeUsingContentType", testAuthPermissionToOneDjangoContentTypeUsingContentType)
	t.Run("AuthUserGroupToAuthGroupUsingGroup", testAuthUserGroupToOneAuthGroupUsingGroup)
	t.Run("AuthUserGroupToAuthUserUsingUser", testAuthUserGroupToOneAuthUserUsingUser)
	t.Run("AuthUserUserPermissionToAuthPermissionUsingPermission", testAuthUserUserPermissionToOneAuthPermissionUsingPermission)
	t.Run("AuthUserUserPermissionToAuthUserUsingUser", testAuthUserUserPermissionToOneAuthUserUsingUser)
	t.Run("DjangoAdminLogToDjangoContentTypeUsingContentType", testDjangoAdminLogToOneDjangoContentTypeUsingContentType)
	t.Run("DjangoAdminLogToAuthUserUsingUser", testDjangoAdminLogToOneAuthUserUsingUser)
	t.Run("PetsPetToPetsSpecyUsingSpecy", testPetsPetToOnePetsSpecyUsingSpecy)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AuthGroupToGroupAuthGroupPermissions", testAuthGroupToManyGroupAuthGroupPermissions)
	t.Run("AuthGroupToGroupAuthUserGroups", testAuthGroupToManyGroupAuthUserGroups)
	t.Run("AuthPermissionToPermissionAuthGroupPermissions", testAuthPermissionToManyPermissionAuthGroupPermissions)
	t.Run("AuthPermissionToPermissionAuthUserUserPermissions", testAuthPermissionToManyPermissionAuthUserUserPermissions)
	t.Run("AuthUserToUserAuthUserGroups", testAuthUserToManyUserAuthUserGroups)
	t.Run("AuthUserToUserAuthUserUserPermissions", testAuthUserToManyUserAuthUserUserPermissions)
	t.Run("AuthUserToUserDjangoAdminLogs", testAuthUserToManyUserDjangoAdminLogs)
	t.Run("DjangoContentTypeToContentTypeAuthPermissions", testDjangoContentTypeToManyContentTypeAuthPermissions)
	t.Run("DjangoContentTypeToContentTypeDjangoAdminLogs", testDjangoContentTypeToManyContentTypeDjangoAdminLogs)
	t.Run("PetsSpecyToSpecyPetsPets", testPetsSpecyToManySpecyPetsPets)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AuthGroupPermissionToAuthPermissionUsingPermissionAuthGroupPermissions", testAuthGroupPermissionToOneSetOpAuthPermissionUsingPermission)
	t.Run("AuthGroupPermissionToAuthGroupUsingGroupAuthGroupPermissions", testAuthGroupPermissionToOneSetOpAuthGroupUsingGroup)
	t.Run("AuthPermissionToDjangoContentTypeUsingContentTypeAuthPermissions", testAuthPermissionToOneSetOpDjangoContentTypeUsingContentType)
	t.Run("AuthUserGroupToAuthGroupUsingGroupAuthUserGroups", testAuthUserGroupToOneSetOpAuthGroupUsingGroup)
	t.Run("AuthUserGroupToAuthUserUsingUserAuthUserGroups", testAuthUserGroupToOneSetOpAuthUserUsingUser)
	t.Run("AuthUserUserPermissionToAuthPermissionUsingPermissionAuthUserUserPermissions", testAuthUserUserPermissionToOneSetOpAuthPermissionUsingPermission)
	t.Run("AuthUserUserPermissionToAuthUserUsingUserAuthUserUserPermissions", testAuthUserUserPermissionToOneSetOpAuthUserUsingUser)
	t.Run("DjangoAdminLogToDjangoContentTypeUsingContentTypeDjangoAdminLogs", testDjangoAdminLogToOneSetOpDjangoContentTypeUsingContentType)
	t.Run("DjangoAdminLogToAuthUserUsingUserDjangoAdminLogs", testDjangoAdminLogToOneSetOpAuthUserUsingUser)
	t.Run("PetsPetToPetsSpecyUsingSpecyPetsPets", testPetsPetToOneSetOpPetsSpecyUsingSpecy)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("DjangoAdminLogToDjangoContentTypeUsingContentTypeDjangoAdminLogs", testDjangoAdminLogToOneRemoveOpDjangoContentTypeUsingContentType)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AuthGroupToGroupAuthGroupPermissions", testAuthGroupToManyAddOpGroupAuthGroupPermissions)
	t.Run("AuthGroupToGroupAuthUserGroups", testAuthGroupToManyAddOpGroupAuthUserGroups)
	t.Run("AuthPermissionToPermissionAuthGroupPermissions", testAuthPermissionToManyAddOpPermissionAuthGroupPermissions)
	t.Run("AuthPermissionToPermissionAuthUserUserPermissions", testAuthPermissionToManyAddOpPermissionAuthUserUserPermissions)
	t.Run("AuthUserToUserAuthUserGroups", testAuthUserToManyAddOpUserAuthUserGroups)
	t.Run("AuthUserToUserAuthUserUserPermissions", testAuthUserToManyAddOpUserAuthUserUserPermissions)
	t.Run("AuthUserToUserDjangoAdminLogs", testAuthUserToManyAddOpUserDjangoAdminLogs)
	t.Run("DjangoContentTypeToContentTypeAuthPermissions", testDjangoContentTypeToManyAddOpContentTypeAuthPermissions)
	t.Run("DjangoContentTypeToContentTypeDjangoAdminLogs", testDjangoContentTypeToManyAddOpContentTypeDjangoAdminLogs)
	t.Run("PetsSpecyToSpecyPetsPets", testPetsSpecyToManyAddOpSpecyPetsPets)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("DjangoContentTypeToContentTypeDjangoAdminLogs", testDjangoContentTypeToManySetOpContentTypeDjangoAdminLogs)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("DjangoContentTypeToContentTypeDjangoAdminLogs", testDjangoContentTypeToManyRemoveOpContentTypeDjangoAdminLogs)
}

func TestReload(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsReload)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsReload)
	t.Run("AuthPermissions", testAuthPermissionsReload)
	t.Run("AuthUsers", testAuthUsersReload)
	t.Run("AuthUserGroups", testAuthUserGroupsReload)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsReload)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsReload)
	t.Run("DjangoContentTypes", testDjangoContentTypesReload)
	t.Run("DjangoMigrations", testDjangoMigrationsReload)
	t.Run("DjangoSessions", testDjangoSessionsReload)
	t.Run("MeetupsMeetups", testMeetupsMeetupsReload)
	t.Run("PetsPets", testPetsPetsReload)
	t.Run("PetsSpecies", testPetsSpeciesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsReloadAll)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsReloadAll)
	t.Run("AuthPermissions", testAuthPermissionsReloadAll)
	t.Run("AuthUsers", testAuthUsersReloadAll)
	t.Run("AuthUserGroups", testAuthUserGroupsReloadAll)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsReloadAll)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsReloadAll)
	t.Run("DjangoContentTypes", testDjangoContentTypesReloadAll)
	t.Run("DjangoMigrations", testDjangoMigrationsReloadAll)
	t.Run("DjangoSessions", testDjangoSessionsReloadAll)
	t.Run("MeetupsMeetups", testMeetupsMeetupsReloadAll)
	t.Run("PetsPets", testPetsPetsReloadAll)
	t.Run("PetsSpecies", testPetsSpeciesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsSelect)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsSelect)
	t.Run("AuthPermissions", testAuthPermissionsSelect)
	t.Run("AuthUsers", testAuthUsersSelect)
	t.Run("AuthUserGroups", testAuthUserGroupsSelect)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsSelect)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsSelect)
	t.Run("DjangoContentTypes", testDjangoContentTypesSelect)
	t.Run("DjangoMigrations", testDjangoMigrationsSelect)
	t.Run("DjangoSessions", testDjangoSessionsSelect)
	t.Run("MeetupsMeetups", testMeetupsMeetupsSelect)
	t.Run("PetsPets", testPetsPetsSelect)
	t.Run("PetsSpecies", testPetsSpeciesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsUpdate)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsUpdate)
	t.Run("AuthPermissions", testAuthPermissionsUpdate)
	t.Run("AuthUsers", testAuthUsersUpdate)
	t.Run("AuthUserGroups", testAuthUserGroupsUpdate)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsUpdate)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsUpdate)
	t.Run("DjangoContentTypes", testDjangoContentTypesUpdate)
	t.Run("DjangoMigrations", testDjangoMigrationsUpdate)
	t.Run("DjangoSessions", testDjangoSessionsUpdate)
	t.Run("MeetupsMeetups", testMeetupsMeetupsUpdate)
	t.Run("PetsPets", testPetsPetsUpdate)
	t.Run("PetsSpecies", testPetsSpeciesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsSliceUpdateAll)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsSliceUpdateAll)
	t.Run("AuthPermissions", testAuthPermissionsSliceUpdateAll)
	t.Run("AuthUsers", testAuthUsersSliceUpdateAll)
	t.Run("AuthUserGroups", testAuthUserGroupsSliceUpdateAll)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsSliceUpdateAll)
	t.Run("DjangoAdminLogs", testDjangoAdminLogsSliceUpdateAll)
	t.Run("DjangoContentTypes", testDjangoContentTypesSliceUpdateAll)
	t.Run("DjangoMigrations", testDjangoMigrationsSliceUpdateAll)
	t.Run("DjangoSessions", testDjangoSessionsSliceUpdateAll)
	t.Run("MeetupsMeetups", testMeetupsMeetupsSliceUpdateAll)
	t.Run("PetsPets", testPetsPetsSliceUpdateAll)
	t.Run("PetsSpecies", testPetsSpeciesSliceUpdateAll)
}
