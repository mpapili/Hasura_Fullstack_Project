// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPetsPets(t *testing.T) {
	t.Parallel()

	query := PetsPets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPetsPetsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PetsPet{}
	if err = randomize.Struct(seed, o, petsPetDBTypes, true, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PetsPets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPetsPetsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PetsPet{}
	if err = randomize.Struct(seed, o, petsPetDBTypes, true, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PetsPets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PetsPets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPetsPetsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PetsPet{}
	if err = randomize.Struct(seed, o, petsPetDBTypes, true, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PetsPetSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PetsPets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPetsPetsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PetsPet{}
	if err = randomize.Struct(seed, o, petsPetDBTypes, true, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PetsPetExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PetsPet exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PetsPetExists to return true, but got false.")
	}
}

func testPetsPetsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PetsPet{}
	if err = randomize.Struct(seed, o, petsPetDBTypes, true, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	petsPetFound, err := FindPetsPet(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if petsPetFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPetsPetsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PetsPet{}
	if err = randomize.Struct(seed, o, petsPetDBTypes, true, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PetsPets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPetsPetsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PetsPet{}
	if err = randomize.Struct(seed, o, petsPetDBTypes, true, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PetsPets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPetsPetsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	petsPetOne := &PetsPet{}
	petsPetTwo := &PetsPet{}
	if err = randomize.Struct(seed, petsPetOne, petsPetDBTypes, false, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}
	if err = randomize.Struct(seed, petsPetTwo, petsPetDBTypes, false, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = petsPetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = petsPetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PetsPets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPetsPetsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	petsPetOne := &PetsPet{}
	petsPetTwo := &PetsPet{}
	if err = randomize.Struct(seed, petsPetOne, petsPetDBTypes, false, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}
	if err = randomize.Struct(seed, petsPetTwo, petsPetDBTypes, false, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = petsPetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = petsPetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PetsPets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func petsPetBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PetsPet) error {
	*o = PetsPet{}
	return nil
}

func petsPetAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PetsPet) error {
	*o = PetsPet{}
	return nil
}

func petsPetAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PetsPet) error {
	*o = PetsPet{}
	return nil
}

func petsPetBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PetsPet) error {
	*o = PetsPet{}
	return nil
}

func petsPetAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PetsPet) error {
	*o = PetsPet{}
	return nil
}

func petsPetBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PetsPet) error {
	*o = PetsPet{}
	return nil
}

func petsPetAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PetsPet) error {
	*o = PetsPet{}
	return nil
}

func petsPetBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PetsPet) error {
	*o = PetsPet{}
	return nil
}

func petsPetAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PetsPet) error {
	*o = PetsPet{}
	return nil
}

func testPetsPetsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PetsPet{}
	o := &PetsPet{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, petsPetDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PetsPet object: %s", err)
	}

	AddPetsPetHook(boil.BeforeInsertHook, petsPetBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	petsPetBeforeInsertHooks = []PetsPetHook{}

	AddPetsPetHook(boil.AfterInsertHook, petsPetAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	petsPetAfterInsertHooks = []PetsPetHook{}

	AddPetsPetHook(boil.AfterSelectHook, petsPetAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	petsPetAfterSelectHooks = []PetsPetHook{}

	AddPetsPetHook(boil.BeforeUpdateHook, petsPetBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	petsPetBeforeUpdateHooks = []PetsPetHook{}

	AddPetsPetHook(boil.AfterUpdateHook, petsPetAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	petsPetAfterUpdateHooks = []PetsPetHook{}

	AddPetsPetHook(boil.BeforeDeleteHook, petsPetBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	petsPetBeforeDeleteHooks = []PetsPetHook{}

	AddPetsPetHook(boil.AfterDeleteHook, petsPetAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	petsPetAfterDeleteHooks = []PetsPetHook{}

	AddPetsPetHook(boil.BeforeUpsertHook, petsPetBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	petsPetBeforeUpsertHooks = []PetsPetHook{}

	AddPetsPetHook(boil.AfterUpsertHook, petsPetAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	petsPetAfterUpsertHooks = []PetsPetHook{}
}

func testPetsPetsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PetsPet{}
	if err = randomize.Struct(seed, o, petsPetDBTypes, true, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PetsPets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPetsPetsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PetsPet{}
	if err = randomize.Struct(seed, o, petsPetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(petsPetColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PetsPets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPetsPetToOnePetsSpecyUsingSpecy(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PetsPet
	var foreign PetsSpecy

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, petsPetDBTypes, false, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, petsSpecyDBTypes, false, petsSpecyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsSpecy struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SpeciesID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Specy().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PetsPetSlice{&local}
	if err = local.L.LoadSpecy(ctx, tx, false, (*[]*PetsPet)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Specy == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Specy = nil
	if err = local.L.LoadSpecy(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Specy == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPetsPetToOneSetOpPetsSpecyUsingSpecy(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PetsPet
	var b, c PetsSpecy

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, petsPetDBTypes, false, strmangle.SetComplement(petsPetPrimaryKeyColumns, petsPetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, petsSpecyDBTypes, false, strmangle.SetComplement(petsSpecyPrimaryKeyColumns, petsSpecyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, petsSpecyDBTypes, false, strmangle.SetComplement(petsSpecyPrimaryKeyColumns, petsSpecyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PetsSpecy{&b, &c} {
		err = a.SetSpecy(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Specy != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SpecyPetsPets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SpeciesID != x.ID {
			t.Error("foreign key was wrong value", a.SpeciesID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SpeciesID))
		reflect.Indirect(reflect.ValueOf(&a.SpeciesID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SpeciesID != x.ID {
			t.Error("foreign key was wrong value", a.SpeciesID, x.ID)
		}
	}
}

func testPetsPetsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PetsPet{}
	if err = randomize.Struct(seed, o, petsPetDBTypes, true, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPetsPetsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PetsPet{}
	if err = randomize.Struct(seed, o, petsPetDBTypes, true, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PetsPetSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPetsPetsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PetsPet{}
	if err = randomize.Struct(seed, o, petsPetDBTypes, true, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PetsPets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	petsPetDBTypes = map[string]string{`ID`: `bigint`, `Name`: `character varying`, `SpeciesID`: `bigint`}
	_              = bytes.MinRead
)

func testPetsPetsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(petsPetPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(petsPetAllColumns) == len(petsPetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PetsPet{}
	if err = randomize.Struct(seed, o, petsPetDBTypes, true, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PetsPets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, petsPetDBTypes, true, petsPetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPetsPetsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(petsPetAllColumns) == len(petsPetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PetsPet{}
	if err = randomize.Struct(seed, o, petsPetDBTypes, true, petsPetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PetsPets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, petsPetDBTypes, true, petsPetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(petsPetAllColumns, petsPetPrimaryKeyColumns) {
		fields = petsPetAllColumns
	} else {
		fields = strmangle.SetComplement(
			petsPetAllColumns,
			petsPetPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PetsPetSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPetsPetsUpsert(t *testing.T) {
	t.Parallel()

	if len(petsPetAllColumns) == len(petsPetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PetsPet{}
	if err = randomize.Struct(seed, &o, petsPetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PetsPet: %s", err)
	}

	count, err := PetsPets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, petsPetDBTypes, false, petsPetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PetsPet struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PetsPet: %s", err)
	}

	count, err = PetsPets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
