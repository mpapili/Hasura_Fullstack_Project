{"ast":null,"code":"var _jsxFileName = \"/home/mike/Downloads/Hasura_Fullstack_Project/react/mikes-frontend/src/pages/AllMeetups.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport MeetupList from '../components/meetups/MeetupList';\n/*\nconst DUMMY_DATA = [\n    {\n        id: 'm1',\n        title: 'This is the first meetup!',\n        image:\n            'https://www.morristourism.org/wp-content/uploads/2017/05/Taylor-Ice-Cream-Weisler-Chester-scaled-2.jpg',\n        address: 'MeetStreet 5, 12345 Super City',\n        description: 'going to talk about how cool the town is',\n    },\n    {\n        id: 'm2',\n        title: 'This is the second meetup!',\n        image:\n            'https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Main_Street%2C_Chester%2C_NJ_-_clock.jpg/1200px-Main_Street%2C_Chester%2C_NJ_-_clock.jpg',\n        address: 'MeetStreet 7, 12345 Cool City',\n        description: 'going to talk about how cool the town is again',\n    },\n]\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AllMeetupsPage() {\n  _s();\n\n  const [allMeetups, setAllMeetups] = useState([]);\n  /*\n  // http REST equivalent of what we're doing in GraphQL\n  async function getMeetups() {\n      const response = await fetch('http://localhost:8000/meetups'\n      )\n      .then(response => response.json())\n      .then(data => setAllMeetups(data));\n  }\n  */\n\n  async function testGraphql() {\n    const MEETUPS_QUERY = `\n            {\n                meetups_meetup {\n                    address\n                    description\n                    id\n                    image\n                    title\n                }    \n            }\n        `;\n    const response = await fetch('http://localhost:8080/v1/graphql', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: MEETUPS_QUERY\n      })\n    });\n    const rsponseBody = await response.json();\n    setAllMeetups(rsponseBody.data.meetups_meetup);\n    return rsponseBody.data;\n  } //useEffect(() => getMeetups(), []);\n\n\n  useEffect(() => testGraphql(), []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"All Meetups\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: allMeetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 12\n  }, this);\n}\n\n_s(AllMeetupsPage, \"WhN/nepop3MBlGor+g/ePlHFofQ=\");\n\n_c = AllMeetupsPage;\nexport default AllMeetupsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllMeetupsPage\");","map":{"version":3,"sources":["/home/mike/Downloads/Hasura_Fullstack_Project/react/mikes-frontend/src/pages/AllMeetups.js"],"names":["useState","useEffect","MeetupList","AllMeetupsPage","allMeetups","setAllMeetups","testGraphql","MEETUPS_QUERY","response","fetch","method","headers","body","JSON","stringify","query","rsponseBody","json","data","meetups_meetup"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAOC,UAAP,MAAuB,kCAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAGA,SAASC,cAAT,GAA0B;AAAA;;AACtB,QAAM,CAAEC,UAAF,EAAcC,aAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,iBAAeM,WAAf,GAA6B;AACzB,UAAMC,aAAa,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAVQ;AAYA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAD,EAAqC;AAC9DC,MAAAA,MAAM,EAAC,MADuD;AAG9DC,MAAAA,OAAO,EAAC;AAAC,wBAAe;AAAhB,OAHsD;AAI9DC,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,KAAK,EAAER;AAAR,OAAf;AAJyD,KAArC,CAA5B;AAOA,UAAMS,WAAW,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAA1B;AACAZ,IAAAA,aAAa,CAACW,WAAW,CAACE,IAAZ,CAAiBC,cAAlB,CAAb;AACA,WAAOH,WAAW,CAACE,IAAnB;AACF,GApCoB,CAuCtB;;;AACAjB,EAAAA,SAAS,CAAC,MAAMK,WAAW,EAAlB,EAAsB,EAAtB,CAAT;AACA,sBAAO;AAAA,4BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,eAEH,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEF;AAArB;AAAA;AAAA;AAAA;AAAA,YAFG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAIH;;GA7CQD,c;;KAAAA,c;AA+CT,eAAeA,cAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport MeetupList from '../components/meetups/MeetupList';\n\n/*\nconst DUMMY_DATA = [\n    {\n        id: 'm1',\n        title: 'This is the first meetup!',\n        image:\n            'https://www.morristourism.org/wp-content/uploads/2017/05/Taylor-Ice-Cream-Weisler-Chester-scaled-2.jpg',\n        address: 'MeetStreet 5, 12345 Super City',\n        description: 'going to talk about how cool the town is',\n    },\n    {\n        id: 'm2',\n        title: 'This is the second meetup!',\n        image:\n            'https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Main_Street%2C_Chester%2C_NJ_-_clock.jpg/1200px-Main_Street%2C_Chester%2C_NJ_-_clock.jpg',\n        address: 'MeetStreet 7, 12345 Cool City',\n        description: 'going to talk about how cool the town is again',\n    },\n]\n*/\n\n\nfunction AllMeetupsPage() {\n    const [ allMeetups, setAllMeetups ] = useState([]);\n\n    /*\n    // http REST equivalent of what we're doing in GraphQL\n    async function getMeetups() {\n        const response = await fetch('http://localhost:8000/meetups'\n        )\n        .then(response => response.json())\n        .then(data => setAllMeetups(data));\n    }\n    */\n\n    async function testGraphql() {\n        const MEETUPS_QUERY = `\n            {\n                meetups_meetup {\n                    address\n                    description\n                    id\n                    image\n                    title\n                }    \n            }\n        `;\n\n        const response = await fetch('http://localhost:8080/v1/graphql', {\n           method:'POST',\n     \n           headers:{'content-type':'application/json'},\n           body:JSON.stringify({query: MEETUPS_QUERY})\n        })\n     \n        const rsponseBody = await response.json();\n        setAllMeetups(rsponseBody.data.meetups_meetup);\n        return rsponseBody.data;\n     }\n\n\n    //useEffect(() => getMeetups(), []);\n    useEffect(() => testGraphql(), []);\n    return <section>\n        <h1>All Meetups</h1>\n        <MeetupList meetups={allMeetups} />\n    </section>\n}\n\nexport default AllMeetupsPage;"]},"metadata":{},"sourceType":"module"}